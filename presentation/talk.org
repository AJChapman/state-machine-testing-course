#+REVEAL_ROOT: https://cdn.jsdelivr.net/reveal.js/3.0.0/
#+OPTIONS: reveal_title_slide:"<h1>%t</h1><h2>%a</h2><h4>Queensland&nbsp;Functional&nbsp;Programming&nbsp;Lab</h4><h3>%e</h3>"
#+OPTIONS: num:nil
#+OPTIONS: toc:nil

#+TITLE: Property Base Your State Machine (WIP)
#+AUTHOR: Sean Chalmers, Jack Kelly

* Programs are weird and complex
  - "building applications"
    - Expectation: An obedient puppy
    - Reality: Several screeching eldrich horrors
  - hard to test properly
  - settle for some unit tests of expected usage, and /maybe/ some regression checks
  - checking an entire process or workflow is difficult

* Briefly introduce broad property-based testing concepts
  - hands off the mundane aspects to the computer
  - define properties not brittle unit tests
  - frustratingly thorough ;)

* What is state-machine testing
  Testing behaviour with randomised interactions.

* Why is state-machine testing
  All the benefits of property based testing, lifted to the level of application behaviour.

* How is state-machine testing

** Model = State
** Command = Transition

** Phases - Execution Model
*** Generate, ~Require~
*** Execute, ~Update~ 
*** Shrink, ~Ensure~ 

* Machines that grow
  New feature ~ New `Command`
  - Leave it to the framework to weave the new transition in.

* Won't save you from awful tests
  Not a silver bullet for the shitzu of bad testing!

* Danger, Wil Robinson
  In danger of writing a terrible duplicate of what you're testing.
  - Your model should be a tiny collection of "has this transition occurred" and
    the minimum amount of information required to make informed conclusions
    about pre/post-conditions.

* Bonus awesome
  - Use classification to understand your test-case distribution
    - point to https://www.youtube.com/watch?v=NcJOiQlzlXQ

* Some cool examples of applications of state-machine testing
  - direct ((our)coffee machine/turnstile)
  - external (wordpress, levelDB)

* important notes:
  - jack: the thing that made the name click for me: **each command is a transition**.
    - I carried around a model of "you sketch out a state machine like you do in
      automata theory class" for far too long
