#+REVEAL_ROOT: https://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_TITLE_SLIDE: <h1>%t</h1><h2>%a</h2><h4>Queensland&nbsp;Functional&nbsp;Programming&nbsp;Lab</h4><h3>%e</h3>

#+OPTIONS: num:nil
#+OPTIONS: toc:nil

#+TITLE: Property Base Your State Machine
#+AUTHOR: Sean Chalmers, Jack Kelly
#+EMAIL:

* Programs are weird
  Complex, Dependent, Interactive, Insidious

* Testing weird is hard
  - manual testing? [cries in Quality Assurance]
  - which processes do you test?
  - test for failure?

* Cost : Benefit
  - multi-step testing can be arduous and brittle
    - input and process are static
    - coverage
    - new feature? have fun!

* Do what we can
  - write unit tests
  #+BEGIN_SRC haskell
    getLunchFor "fred"  == TunaSalad
    getLunchFor "sally" == HalfChicken ExtraHot
  #+END_SRC
  - subcontract end users to suggest regression tests

* Property-based testing
  - randomised input generation
  - shrinking
  - awesome design tool
    - ~generateText~ becomes ~generateUsername~

* Property-based state machine testing
  Property-based testing, lifted to the level of *application behaviour*.
  
** Generate structured inputs
   randomised inputs for actions

** Generate workflows
   define actions independently, let the package generate workflows

** Shrinking (OMG!)
   you thought shrinking was cool before...

** Useful feedback
   a failure will produce:
   - list of actions
   - their respective inputs
   - the random seed responsible

* OMG
  Right?

* Moving parts

** Model
   track expectations/awareness regarding the 'state' of the world

** Command
   - pre & post conditions
   - input generator
   - action executor
   - model update function
   Represents the /transitions/ not the states.

** Given
   [[./images/mach.png]]

** Test this
   [[./images/mach_transitions.png]]

** Not this
   [[./images/mach_states.png]]

* Machines that grow
  new feature ~ new Command(s)

* Examples?
  - Wordpress API (a tiny bit of it)
  - LevelDB

* Come to the workshop!
  Learn the weirding way!

* Bonus Round
 Use classification to understand your test-case distribution
 - John Hughes: Building on developer intuitions
   - https://www.youtube.com/watch?v=NcJOiQlzlXQ
  
* References
  - LevelDB example
    - https://github.com/strangeloop/lambdajam2013/blob/master/slides/Norton-QuickCheck.html
  - Wordpress example
    - http://qfpl.io/posts/intro-to-state-machine-testing-1/
  - Turnstile
    - https://teh.id.au/posts/2017/07/15/state-machine-testing/index.html
  - Water Jug Puzzle
    - http://nchammas.com/writing/how-not-to-die-hard-with-hypothesis
