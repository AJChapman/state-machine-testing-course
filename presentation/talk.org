#+REVEAL_ROOT: https://cdn.jsdelivr.net/reveal.js/3.0.0/
#+OPTIONS: reveal_title_slide:"<h1>%t</h1><h2>%a</h2><h4>Queensland&nbsp;Functional&nbsp;Programming&nbsp;Lab</h4><h3>%e</h3>"
#+OPTIONS: num:nil
#+OPTIONS: toc:nil

#+TITLE: Property Base Your State Machine
#+AUTHOR: Sean Chalmers, Jack Kelly
#+EMAIL:

* Come to the workshop!
  Discover interesting and fascinating state machines, and test them.

* Programs are weird
  Complex, Dependent, Interactive, Insidious

* Testing weird is hard
  - manual testing? [cries in Quality Assurance]
  - which processes/use cases do you test?
  - test for failure?

* Do what we can
  - unit tests 
  - maybe test functions that use other functions
  - test 'expected' use
  - subcontract end users to suggest regression tests

* Cost : Benefit
  - multi-step testing can be arduous and brittle
    - input and process are static
    - coverage
    - new feature? have fun!

* Property-based testing
  - fob off the boring bits
  - frustratingly thorough
  - staggeringly useful

* Property-based state machine testing
  Property-based testing, lifted to the level of *application behaviour*.

** Generate workflows
   define individual steps, let the package shuffle them into randomised workflows.

** Generate structured inputs
   create useful randomised inputs for actions

** Shrinking (OMG!)
   you thought shrinking inputs was cool...

** Useful feedback
   - test failure provides the list of actions and their respective inputs
   - the random seed is provided for reproducibility

* OMG
  Right?

* How?! Tell meeeee!

** Model
   expectations/awareness regarding the 'state' of the world

** Command
   Represents the /transitions/ not the states.
   - pre & post conditions
   - input generator
   - action executor
   - model update function

* There be dangers
  there is the risk of writing a terrible duplicate of what you're testing

** Given
   [[./images/mach.png]]

** Test this
   [[./images/mach_transitions.png]]

** Not this
   [[./images/mach_states.png]]

** must maintain minimal model
 
* Machines that grow
  new feature ~ new Command(s)

* Some cool examples of applications of state-machine testing
  - direct ((our)coffee machine/turnstile)
  - external (wordpress, levelDB)

* Come to the workshop!
  Discover interesting and fascinating state machines, and test them.

* Bonus Round
 Use classification to understand your test-case distribution
 - John Hughes: Building on developer intuitions
   - https://www.youtube.com/watch?v=NcJOiQlzlXQ
